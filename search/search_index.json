{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Search-Based Approach to Procedural Content Generation - PCG Bunnies!","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to the PCG Bunnies documentation! This project showcases the application of search-based procedural content generation using evolutionary algorithms. The goal of this project is to generate bunnies with specific desirable traits through the process of evolution. For a general understanding of the concept of procedural content generation and its various approaches, the PCG Book https://pcgbook.com is a great resource.</p> <p>The project was originally developed during the spring of 2014 at SUNY Oswego using the C++ programming language. Since then it has been built in a few different languages and better documentation has been added.</p> <p>What are you waiting for? Jump in here!</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Demonstrates the implementation of search-based PCG using evolutionary algorithms</li> <li>Produces bunnies with specific desirable traits through the evolution process</li> <li>Provides a comprehensive understanding of the concepts of PCG and its different approaches</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions from the open-source community to help improve this project. If you are interested in contributing, please refer to the contributing guidelines for more information.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License.</p>"},{"location":"about/code-of-conduct/","title":"Code of Conduct","text":"<p>The following code of conduct outlines our expectations for all members of the community, as well as steps to reporting unacceptable behavior.</p>"},{"location":"about/code-of-conduct/#our-standards","title":"Our Standards","text":"<p>We expect all members of the community to:</p> <ul> <li>Be respectful of others and their opinions</li> <li>Avoid using offensive language or behavior</li> <li>Refrain from harassment and discrimination</li> </ul>"},{"location":"about/code-of-conduct/#reporting-unacceptable-behavior","title":"Reporting Unacceptable Behavior","text":"<p>If you witness or experience unacceptable behavior, please report it by contacting the repository maintainers. All reports will be reviewed and investigated, and any necessary action will be taken to address the issue.</p>"},{"location":"about/code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4.</p>"},{"location":"about/contributing/","title":"Contributing Guide","text":"<p>I welcome contributions to the repository! Here are some guidelines to follow to help ensure a smooth contribution process.</p>"},{"location":"about/contributing/#reporting-issues","title":"Reporting Issues","text":"<p>If you encounter any problems or have suggestions for improvements, please open an issue on the repository. When creating an issue, please provide a clear and descriptive title and as much detail as possible about the issue.</p>"},{"location":"about/contributing/#pull-requests","title":"Pull Requests","text":"<p>I am open to accepting pull requests to the repository. Here are some steps to follow when submitting a pull request:</p> <ol> <li>Fork the repository</li> <li>Create a new branch for your changes</li> <li>Make the necessary changes</li> <li>Test the changes to ensure they work as intended</li> <li>Commit your changes with a clear and descriptive commit message</li> <li>Push the changes to your fork</li> <li>Submit a pull request to the repository with a clear and concise description of your changes</li> </ol>"},{"location":"about/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please ensure that your contributions and interactions follow the Code of Conduct for the repository.</p>"},{"location":"about/release-notes/","title":"Release Notes","text":""},{"location":"about/release-notes/#v120-09212023","title":"v1.2.0 (09/21/2023)","text":"<ul> <li>Improved documentation</li> <li>Restructured documentation to fit the Standard MkDocs structure</li> <li>Updated documentation to address new warnings from MkDocs 1.5+</li> <li>Updated python packages in requirements.txt</li> <li>Updated Github publish action to newest version</li> <li>Restructured folders to reflect the different languages this project is implemented in</li> <li>Updated License file to remove file extension</li> <li>Removed License file from generated documentation</li> <li>Recreated the project in C#</li> <li>Added Dependabot to Github Actions</li> <li>Bumped versions in requirements.txt</li> </ul>"},{"location":"about/release-notes/#v114-03052023","title":"v1.1.4 (03/05/2023)","text":"<ul> <li>Improved documentation</li> <li>Upgraded MkDocs dependencies</li> <li>Simplified Dockerfiles</li> <li>Deleted the \"dist\" folder and build executables.</li> </ul>"},{"location":"about/release-notes/#v113-01292023","title":"v1.1.3 (01/29/2023)","text":"<ul> <li>Added MIT License</li> <li>Added Code Of Conduct</li> <li>Added contributing guidelines</li> <li>Expanded on documentation</li> <li>Expanded upon Readme file</li> <li>Updated documentation icon</li> <li>Improved Docker-Compose file to use ${PWD} for more flexible paths</li> <li>Enhanced Dockerfile for better clarity, reduced image size and increased security</li> <li>Optimized Alpine Dockerfile for easier copying and simplified run command.</li> <li>Revamped Github Actions to enhance the dynamic nature of document build.</li> </ul>"},{"location":"about/release-notes/#v112-10252022","title":"v1.1.2 (10/25/2022)","text":"<ul> <li>Expanded on documentation</li> </ul>"},{"location":"about/release-notes/#v111-10242022","title":"v1.1.1 (10/24/2022)","text":"<ul> <li>Added documentation and workflow tools</li> </ul>"},{"location":"about/release-notes/#v110-04192022","title":"v1.1.0 (04/19/2022)","text":"<ul> <li>Fixed spelling error in code</li> <li>Included binary in release</li> <li>Moved source files to a separate directory</li> <li>Added changelog, readme, and documentation</li> <li>Included files for building and deploying the project</li> </ul>"},{"location":"about/release-notes/#v101-02262017","title":"v1.0.1 (02/26/2017)","text":"<ul> <li>Created the project repository</li> </ul>"},{"location":"about/release-notes/#v100-022014","title":"v1.0.0 (02/2014)","text":"<ul> <li>Initial release</li> </ul>"},{"location":"about/roadmap/","title":"Roadmap","text":""},{"location":"about/roadmap/#release-v120","title":"Release v1.2.0","text":"<ul> <li> Recreate application in C#</li> <li> Implement MkDocs Standard structure</li> <li> Restructure repository based on language</li> <li> Update documentation to include C# information</li> <li> Add Dependabot to Github Actions</li> </ul>"},{"location":"about/roadmap/#release-v130","title":"Release v1.3.0","text":"<ul> <li> Add Java version of the application</li> </ul>"},{"location":"build/","title":"Building the Project","text":""},{"location":"build/#overview","title":"Overview","text":"<p>To build the project, follow these steps:</p> <ol> <li>Download the repository to your development environment.</li> <li>Make sure you have all necessary dependencies installed on your system.</li> <li>Choose one of the following languages:<ol> <li>C++</li> <li>C#</li> </ol> </li> </ol>"},{"location":"build/cplusplus/","title":"C++","text":""},{"location":"build/cplusplus/#manual-compilation","title":"Manual Compilation","text":"<p>To compile the project manually, navigate to the <code>c++/src</code> directory and run the following command:</p> <pre><code>mkdir -p dist\ng++ Bunny.cpp DNA.cpp main.cpp -g -o dist/pcg-bunnies\n</code></pre> <p>This will create the <code>dist</code> directory and compile the project into an executable named <code>pcg-bunnies</code>.</p>"},{"location":"build/cplusplus/#compile-via-build-script","title":"Compile via Build Script","text":"<p>Navigate to the <code>c++/src</code> directory and run the following command:</p> <pre><code>./build-project\n</code></pre> <p>This will run the provided build script and place the compiled program in the <code>c++/dist</code> folder with the name <code>pcg-bunnies</code>.</p>"},{"location":"build/cplusplus/#compile-via-docker-compose","title":"Compile via Docker Compose","text":"<p>To compile the program using Docker Compose, run one of the following commands based on your Linux distribution from the <code>c++</code> directory:</p> <pre><code># For regular Linux\ndocker-compose build --no-cache latest\n# For Alpine Linux\ndocker-compose build --no-cache alpine\n</code></pre> <p>The resulting image will contain the compiled project in multiple locations:</p> <ul> <li><code>/src/dist/pcg-bunnies</code> (all images)</li> <li><code>/usr/sbin/pcg-bunnies</code> (linux images)</li> <li><code>/sbin/pcg-bunnies</code> (Alpine images)</li> </ul> <p>To compile for a new release of this project, use the development versions (labeled -dev) and manually run the build scripts in the container to generate the binaries.</p>"},{"location":"build/csharp/","title":"C#","text":"<p>Coming Soon</p>"},{"location":"core/","title":"The Search-Based Approach to Procedural Content Generation - PCG Bunnies!","text":"<p>The purpose of this software project is to showcase the application of search-based procedural content generation through the use of evolutionary search algorithms. This approach is a widely recognized method in the field of procedural content generation and is discussed in depth in the book \"The PCG Book\".</p> <p>The project focuses on evolving bunnies over multiple generations with the goal of obtaining bunnies with specific, desired traits.</p>"},{"location":"core/#contents","title":"Contents","text":"<ol> <li>Project Overview<ol> <li>Overview</li> <li>Requirements</li> <li>Quick Start/Run</li> <li>Project Output</li> </ol> </li> <li>Project Deep Dive<ol> <li>Overview</li> <li>Bunny DNA</li> <li>Player DNA</li> <li>Evaluating the Bunny DNA</li> <li>Calculating the Total Fitness Score</li> <li>Generation and Evaluation Rules</li> </ol> </li> <li>Build The Project<ol> <li>C++<ol> <li>Overview</li> <li>Manual Compilation</li> <li>Build Script</li> <li>Docker Compose</li> </ol> </li> <li>C#</li> </ol> </li> </ol>"},{"location":"core/deep-dive/","title":"Project Deep Dive","text":""},{"location":"core/deep-dive/#overview","title":"Overview","text":"<p>This project is a simulation of bunny objects, where each bunny has a unique DNA that represents its attributes in binary form. The binary DNA of a bunny is composed of 5 blocks (10 bits) out of a total of 8 blocks (3 of which are padding) in a strand of 16 bits. The DNA of a bunny can be represented in hexadecimal notation as well. For example the dna of a bunny could potentially look like this:</p> <pre><code># Binary\n00 00 00 10 01 11 01 10\n\n# Hexadecimal\n0x276\n</code></pre>"},{"location":"core/deep-dive/#bunny-dna","title":"Bunny DNA","text":"<p>Each block of a bunny's DNA represents a different attribute type, as follows (reading from right to left):</p> <ul> <li>Ability</li> <li>Defense</li> <li>Mutation</li> <li>Build</li> <li>Strategy</li> </ul> <p>Each block is composed of two bits, resulting in four possible values: 00, 01, 10, or 11. These values correspond to an index in a constant array of traits. Each index in this array represents a general trait type:</p> <ul> <li>0 = Stealth</li> <li>1 = Aggressive</li> <li>2 = Defensive</li> <li>3 = Ranged</li> </ul> <p>The specific trait definitions are as follows:</p> <ol> <li> <p>Ability</p> <ol> <li>Poison (00)</li> <li>Heat (01)</li> <li>Radiation (10)</li> <li>Spatial Distortion (11)</li> </ol> </li> <li> <p>Defense</p> <ol> <li>Blends In (00)</li> <li>Thick Skin (01)</li> <li>Dodge (10)</li> <li>Run Away! (11)</li> </ol> </li> <li> <p>Mutation</p> <ol> <li>Suction Cup Feet (00)</li> <li>Large Claws (01)</li> <li>Advanced Reflexes (10)</li> <li>Massive Telepathic Brain (11)</li> </ol> </li> <li> <p>Build</p> <ol> <li>Small (00)</li> <li>Muscular (01)</li> <li>Toned (10)</li> <li>Fat (11)</li> </ol> </li> <li> <p>Strategy</p> <ol> <li>Stealth (00)</li> <li>Aggressive (01)</li> <li>Defensive (10)</li> <li>Ranged (11)</li> </ol> </li> </ol> <p>For example, using the DNA strand \"1001110110\" (ignoring the padding), the attributes of the bunny would be:</p> <ul> <li>Ability (Block 1): 10 = Radiation</li> <li>Defense (Block 2): 01 = Thick Skin</li> <li>Mutation (Block 3): 11 = Massive Telepathic Brain</li> <li>Build (Block 4): 01 = Muscular</li> <li>Strategy (Block 5): 10 = Defensive</li> </ul>"},{"location":"core/deep-dive/#player-dna","title":"Player DNA","text":"<p>The DNA of the player is used to determine the fitness score of the bunny DNA. The player DNA is composed of 4 blocks (8 bits) and can be represented in hexadecimal notation as well. Each block of player DNA corresponds to a specific attribute of the bunny DNA, as specified in the following table:</p> Player DNA Block Index Bunny DNA Block Attribute Index 0 3 1 2 2 1 3 0 <p>The player DNA is decoded by converting each block to an integer value and adding 1 to it. For example, block 1 (binary <code>10</code>) is equal to 2 + 1 = 3.</p>"},{"location":"core/deep-dive/#evaluating-the-bunny-dna","title":"Evaluating the Bunny DNA","text":"<p>The fitness score of a bunny is calculated based on its comparison with the player DNA. The player DNA can change over time, which may affect the evolution of the bunnies and what constitutes a high fitness score.</p> <p>Each block of the bunny DNA is converted to a fitness score by matching it with the corresponding block in the player DNA. The value of the attribute is first converted to the index value based on the player DNA, and then to a fitness score by multiplying it by 5.</p> <p>For example, if the bunny DNA block one (Ability) is <code>1001110110</code> and the player DNA is <code>11010010</code>, the index value for block one is 2 (which corresponds to \"Radiation\"). This value matches player DNA block index 1 (or block 2), which has a value of <code>00</code> or 0. Adding 1 to this value gives a final score of 1, which is the fitness score for the \"Ability\" block of this bunny's DNA.</p>"},{"location":"core/deep-dive/#calculating-the-total-fitness-score","title":"Calculating the Total Fitness Score","text":"<p>To determine a bunny's total fitness score, the fitness score of each block of its DNA is added together. The resulting score is on a scale of 5-20, with a highest score of 20, mid-high score of 15, mid-low score of 10, and lowest score of 5.</p>"},{"location":"core/deep-dive/#generation-and-evaluation-rules","title":"Generation and Evaluation Rules","text":"<ol> <li>Bunnies with the highest fitness scores, ranging from 18 to 20, are considered \"Best of the Best.\"</li> <li>Bunnies with moderate fitness scores, ranging from 12 to 17, are considered \"Hopeful Monsters.\"</li> <li>Bunnies with a fitness score of 11 or lower do not survive and are eliminated from the gene pool.</li> <li>If not enough bunnies survive, new ones are generated with random DNA to replenish the gene pool.</li> <li>Each generation has a chance for random mutations to occur in the offspring.</li> </ol>"},{"location":"core/overview/","title":"Project Overview","text":""},{"location":"core/overview/#overview","title":"Overview","text":"<p>This project is a procedural content generation tool that uses evolutionary algorithms to generate new and unique bunnies. It requires the g++ package for compilation and is currently only supported on Linux distros. Users can quickly start the program by downloading the most recent compiled version of the project and running the binary that matches their OS. The output of the program will display a summary of the bunnies' characteristics and how they've evolved over the generations. The goal of the project is to reach an optimal ratio of 'fit' to 'unfit' bunnies using the set criteria. The project allows developers to quickly generate unique and interesting content for their projects without having to manually create each piece.</p>"},{"location":"core/overview/#requirements","title":"Requirements","text":"<p>This project requires the g++ package for compilation and Linux distros are currently supported. Docker/Compose can also be used to build the project but it is not a requirement.</p>"},{"location":"core/overview/#quick-startrun","title":"Quick Start/Run","text":"<ol> <li>Download the most recent version of the project from the Latest Release </li> <li>Run the binary that matches your OS via the command line:</li> </ol> <pre><code># Linux/Alpine\n./pcg-bunnies\n</code></pre>"},{"location":"core/overview/#project-output","title":"Project Output","text":"<p>After running the project, you will see something similar to the following printed 50 times:</p> <pre><code>Generation (n) summary:\n(d) Bunnies Died\n(s) Bunnies Survived.\nOf those that Survived:\n(h) were Hopeful Monsters.\n(b) were the Best of the Best.\n</code></pre> <p>where:</p> <ul> <li>n = Generation number</li> <li>d = The number of bunnies that were 'unfit' and 'died off'- unable to pass on their dna to the next generation</li> <li>s = The number of bunnies that were 'fit' and thus survived - giving them a chance to pass on their dna to the next generation</li> <li>h = The number of bunnies that are considered 'hopeful monsters' - bunnies that are considered almost the 'best of the best'</li> <li>b = The number of bunnies that are considered the best possible via the set criteria</li> </ul> <p>The goal of the project is to reach a better ratio of 'fit' to 'unfit' bunnies with each generation. This project is not currently calibrated and can reach an acceptable number of 'fit' bunnies in few generations.</p>"}]}